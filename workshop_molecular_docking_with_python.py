# -*- coding: utf-8 -*-
"""Workshop_Molecular_docking_with_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EqWWFnKP0klugKs3UyBbrgYzoUc30elF
"""

! pip install biopython

! pip install rdkit

import os
import numpy as np
import pandas as pd
import requests
from Bio.PDB import PDBList
from rdkit import Chem
from rdkit.Chem import Descriptors, AllChem
import joblib

!pip install chembl-webresource-client rdkit-pypi pandas

from chembl_webresource_client.new_client import new_client

# Initialize ChEMBL client
target_client = new_client.target
activity_client = new_client.activity

# Step 1: Search for the target by keyword
search_term = "Alzheimer's"
targets = target_client.search(search_term)

# Display matching targets
print("Available targets for the search term:")
for target in targets:
    print(f"Target: {target['pref_name']}, ChEMBL ID: {target['target_chembl_id']}")

# Step 2: Choose a target (e.g., the first match)
target_id = targets[0]['target_chembl_id']  # Automatically use the first result
print(f"Selected Target: {targets[0]['pref_name']} ({target_id})")

# Step 3: Fetch inhibitors for the selected target
activities = activity_client.filter(target_chembl_id=target_id, standard_type="IC50").only(
    ["molecule_chembl_id", "canonical_smiles", "standard_value"]
)

# Convert to a Pandas DataFrame
data = []
for activity in activities:
    smiles = activity.get("canonical_smiles")
    ic50 = activity.get("standard_value")
    molecule_id = activity.get("molecule_chembl_id")
    if smiles and ic50:
        data.append({"Molecule ChEMBL ID": molecule_id, "SMILES": smiles, "IC50 (nM)": ic50})

df = pd.DataFrame(data)

# Step 4: Save the data to a CSV file
output_file = "Alzheimer_compounds.csv"
df.to_csv(output_file, index=False)
print(f"Inhibitors saved to {output_file}")

# Display the first few inhibitors
print(df.head())

from chembl_webresource_client.new_client import new_client

# Initialize ChEMBL client
target_client = new_client.target
activity_client = new_client.activity

# Step 1: Search for the target by keyword
search_term = "Parkinson's"
targets = target_client.search(search_term)

# Display matching targets
print("Available targets for the search term:")
for target in targets:
    print(f"Target: {target['pref_name']}, ChEMBL ID: {target['target_chembl_id']}")

# Step 2: Choose a target (e.g., the first match)
target_id = targets[0]['target_chembl_id']  # Automatically use the first result
print(f"Selected Target: {targets[0]['pref_name']} ({target_id})")

# Step 3: Fetch inhibitors for the selected target
activities = activity_client.filter(target_chembl_id=target_id, standard_type="IC50").only(
    ["molecule_chembl_id", "canonical_smiles", "standard_value"]
)

# Convert to a Pandas DataFrame
data = []
for activity in activities:
    smiles = activity.get("canonical_smiles")
    ic50 = activity.get("standard_value")
    molecule_id = activity.get("molecule_chembl_id")
    if smiles and ic50:
        data.append({"Molecule ChEMBL ID": molecule_id, "SMILES": smiles, "IC50 (nM)": ic50})

df = pd.DataFrame(data)

# Step 4: Save the data to a CSV file
output_file = "parkinson_compounds.csv"
df.to_csv(output_file, index=False)
print(f"Inhibitors saved to {output_file}")

# Display the first few inhibitors
print(df.head())

from chembl_webresource_client.new_client import new_client

# Initialize ChEMBL client
target_client = new_client.target
activity_client = new_client.activity

# Step 1: Search for the target by keyword
search_term = "huntington's"
targets = target_client.search(search_term)

# Display matching targets
print("Available targets for the search term:")
for target in targets:
    print(f"Target: {target['pref_name']}, ChEMBL ID: {target['target_chembl_id']}")

# Step 2: Choose a target (e.g., the first match)
target_id = targets[0]['target_chembl_id']  # Automatically use the first result
print(f"Selected Target: {targets[0]['pref_name']} ({target_id})")

# Step 3: Fetch inhibitors for the selected target
activities = activity_client.filter(target_chembl_id=target_id, standard_type="IC50").only(
    ["molecule_chembl_id", "canonical_smiles", "standard_value"]
)

# Convert to a Pandas DataFrame
data = []
for activity in activities:
    smiles = activity.get("canonical_smiles")
    ic50 = activity.get("standard_value")
    molecule_id = activity.get("molecule_chembl_id")
    if smiles and ic50:
        data.append({"Molecule ChEMBL ID": molecule_id, "SMILES": smiles, "IC50 (nM)": ic50})

df = pd.DataFrame(data)

# Step 4: Save the data to a CSV file
output_file = "huntington_compounds.csv"
df.to_csv(output_file, index=False)
print(f"Inhibitors saved to {output_file}")

# Display the first few inhibitors
print(df.head())

from chembl_webresource_client.new_client import new_client

# Initialize ChEMBL client
target_client = new_client.target
activity_client = new_client.activity

# Step 1: Search for the target by keyword
search_term = "Neurodegenerative drugs"
targets = target_client.search(search_term)

# Display matching targets
print("Available targets for the search term:")
for target in targets:
    print(f"Target: {target['pref_name']}, ChEMBL ID: {target['target_chembl_id']}")

# Step 2: Choose a target (e.g., the first match)
target_id = targets[0]['target_chembl_id']  # Automatically use the first result
print(f"Selected Target: {targets[0]['pref_name']} ({target_id})")

# Step 3: Fetch inhibitors for the selected target
activities = activity_client.filter(target_chembl_id=target_id, standard_type="IC50").only(
    ["molecule_chembl_id", "canonical_smiles", "standard_value"]
)

# Convert to a Pandas DataFrame
data = []
for activity in activities:
    smiles = activity.get("canonical_smiles")
    ic50 = activity.get("standard_value")
    molecule_id = activity.get("molecule_chembl_id")
    if smiles and ic50:
        data.append({"Molecule ChEMBL ID": molecule_id, "SMILES": smiles, "IC50 (nM)": ic50})

df = pd.DataFrame(data)

# Step 4: Save the data to a CSV file
output_file = "Neurodegenerative_compounds.csv"
df.to_csv(output_file, index=False)
print(f"Inhibitors saved to {output_file}")

# Display the first few inhibitors
print(df.head())

from rdkit.Chem.rdMolDescriptors import GetMorganFingerprintAsBitVect

!apt-get install -y autodock-vina

!vina --version

!apt-get update
!apt-get install -y openbabel

import pandas as pd

# Load the uploaded CSV files
parkinson_df = pd.read_csv('parkinson_compounds.csv')
neurodegenerative_df = pd.read_csv('/content/Neurodegenerative_compounds.csv')
alzheimer_df = pd.read_csv('Alzheimer_compounds.csv')
huntington_df = pd.read_csv('huntington_compounds.csv')

# Inspecting the structure of the data
parkinson_df.head(), neurodegenerative_df.head(), alzheimer_df.head(), huntington_df.head()

combined_compounds_df = pd.concat([parkinson_df, alzheimer_df, neurodegenerative_df, huntington_df], ignore_index=True)

# Step 3: Remove duplicates based on 'Molecule ChEMBL ID'
combined_compounds_df.drop_duplicates(subset=['Molecule ChEMBL ID'], inplace=True)

# Step 4: Retain only essential columns
essential_columns = ['Molecule ChEMBL ID', 'SMILES', 'IC50 (nM)']
processed_compounds_df = combined_compounds_df[essential_columns]

# Step 5: Save cleaned data to a new CSV
processed_compounds_df.to_csv('processed_compounds.csv', index=False)

# Step 6: Output summary
print("Preprocessing Completed:")
print(f"Total Unique Compounds (after removing duplicates): {processed_compounds_df.shape[0]}")
print(f"Columns retained: {list(processed_compounds_df.columns)}")

import Bio

# Read the PDBQT file manually
with open("/content/5vt2.pdbqt", "r") as file:
    lines = file.readlines()

# Extract only ATOM and HETATM lines (standard PDB format)
pdb_lines = [line for line in lines if line.startswith(("ATOM", "HETATM"))]

# Store in a variable
pdbqt_structure = "\n".join(pdb_lines)

# Print first 10 lines
print("\n".join(pdb_lines[:10]))  # Preview first 10 ATOM/HETATM entries

# Paths and configurations
'''protein_pdbqt = "5vt2.pdbqt"  # Protein in PDBQT format


# Step 1: Prepare the protein
""" def prepare_protein(protein_pdb, protein_pdbqt):

    Converts a PDB file to PDBQT format using Open Babel.

    os.system(f"obabel {protein_pdb} -O {protein_pdbqt} --gen3d")
    print(f"Protein prepared and saved as {protein_pdbqt}")"""

ligands_csv = "/content/processed_compounds.csv"  # CSV file with ligand SMILES
docking_results_dir = "docking_results"  # Directory to save results
box_center = [32, -8, -11]  # Center of docking box (x, y, z)
box_size = [24, 24, 24]  # Size of docking box (x, y, z)

import os
import csv
import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem

# Paths and configurations
ligands_csv = "/content/processed_compounds.csv"  # CSV file with ligand SMILES
docking_results_dir = "optimized_docking_results"  # Directory for results
box_center = [32, -8, -11]  # Center of docking box (x, y, z)
box_size = [24, 24, 24]  # Size of docking box (x, y, z)
exhaustiveness = 16  # Increase to explore more conformations


# Step 2: Prepare ligands with energy minimization
def prepare_ligands(ligands_csv, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    ligands = pd.read_csv(ligands_csv)
    for index, row in ligands.iterrows():
        smiles = row['SMILES']
        ligand_name = f"ligand_{index}"
        pdb_file = os.path.join(output_dir, f"{ligand_name}.pdb")
        pdbqt_file = os.path.join(output_dir, f"{ligand_name}.pdbqt")

        # Generate 3D structure using RDKit
        mol = Chem.MolFromSmiles(smiles)
        mol = Chem.AddHs(mol)
        AllChem.EmbedMolecule(mol, AllChem.ETKDG())
        AllChem.UFFOptimizeMolecule(mol)  # Energy minimization
        Chem.MolToPDBFile(mol, pdb_file)

        # Convert PDB to PDBQT using Open Babel
        os.system(f"obabel {pdb_file} -O {pdbqt_file} --gen3d")
    print("Ligands prepared and saved in PDBQT format.")

# Step 3: Perform docking with refined parameters
def dock_ligands(protein_pdbqt, ligands_dir, output_dir, box_center, box_size, exhaustiveness):
    os.makedirs(output_dir, exist_ok=True)
    ligand_files = [f for f in os.listdir(ligands_dir) if f.endswith(".pdbqt")]

    print(f"Found {len(ligand_files)} ligands for docking.")

    for ligand_file in ligand_files:
        ligand_path = os.path.join(ligands_dir, ligand_file)
        output_path = os.path.join(output_dir, f"{ligand_file}_docked.pdbqt")

        docking_command = (
            f"vina --receptor {protein_pdbqt} --ligand {ligand_path} --out {output_path} "
            f"--center_x {box_center[0]} --center_y {box_center[1]} --center_z {box_center[2]} "
            f"--size_x {box_size[0]} --size_y {box_size[1]} --size_z {box_size[2]} "
            f"--exhaustiveness {exhaustiveness}"
        )

        os.system(docking_command)
        if os.path.exists(output_path):
            print(f"Docking completed for {ligand_file}")
        else:
            print(f"Docking failed for {ligand_file}")

# Step 4: Analyze docking results
def analyze_results(docking_results_dir, output_csv):
    results = []
    for pdbqt_file in os.listdir(docking_results_dir):
        if pdbqt_file.endswith("_docked.pdbqt"):
            with open(os.path.join(docking_results_dir, pdbqt_file), "r") as f:
                score = None
                for line in f:
                    if "REMARK VINA RESULT" in line:
                        score = float(line.split()[3])
                        break
                if score is not None:
                    results.append((pdbqt_file, score))

    results.sort(key=lambda x: x[1])  # Sort by docking score (lower is better)

    # Save results to CSV
    with open(output_csv, "w", newline="") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["Ligand File", "Docking Score (kcal/mol)"])
        writer.writerows(results)

    print(f"Docking scores saved to {output_csv}")
    print("Top docking results:")
    for result in results[:10]:
        print(result)

# Execute workflow
if __name__ == "__main__":

    # Step 2: Prepare ligands
    prepare_ligands(ligands_csv, "prepared_ligands")

    # Step 3: Perform docking
    dock_ligands("/content/5vt2.pdbqt", "prepared_ligands", docking_results_dir, box_center, box_size, exhaustiveness)

    # Step 4: Analyze results
    analyze_results(docking_results_dir, "optimized_docking_scores.csv")

# Step 2: Prepare ligands with energy minimization
def prepare_ligands(ligands_csv, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    ligands = pd.read_csv(ligands_csv)
    for index, row in ligands.iterrows():
        smiles = row['SMILES']
        ligand_name = f"ligand_{index}"
        pdb_file = os.path.join(output_dir, f"{ligand_name}.pdb")
        pdbqt_file = os.path.join(output_dir, f"{ligand_name}.pdbqt")

        # Generate 3D structure using RDKit
        mol = Chem.MolFromSmiles(smiles)
        mol = Chem.AddHs(mol)
        AllChem.EmbedMolecule(mol, AllChem.ETKDG())
        AllChem.UFFOptimizeMolecule(mol)  # Energy minimization
        Chem.MolToPDBFile(mol, pdb_file)

        # Convert PDB to PDBQT using Open Babel
        os.system(f"obabel {pdb_file} -O {pdbqt_file} --gen3d")
    print("Ligands prepared and saved in PDBQT format.")


# Execute workflow
if __name__ == "__main__":

    # Step 2: Prepare ligands
    prepare_ligands(ligands_csv, "prepared_ligands")

import os
import csv
import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem

# Paths and configurations
ligands_csv = "/content/processed_compounds.csv"  # CSV file with ligand SMILES
docking_results_dir = "optimized_docking_results"  # Directory for results
box_center = [32, -8, -11]  # Center of docking box (x, y, z)
box_size = [24, 24, 24]  # Size of docking box (x, y, z)
exhaustiveness = 16  # Increase to explore more conformations

!pip install py3Dmol

! vina --receptor 5vt2.pdbqt --ligand /content/prepared_ligands/ligand_0.pdbqt --out 5vt2.pdbqt_docked.pdbqt --center_x 233 --center_y 222 --center_z 207 --size_x 60 --size_y 60 --size_z 60 --exhaustiveness 8

import py3Dmol

# Replace with your actual docked file path (must be .pdbqt or .pdb)
docked_file = "/content/optimized_docking_results/ligand_0.pdbqt_docked.pdbqt"  # or .pdb

# Read the structure file
with open(docked_file, 'r') as file:
    structure_data = file.read()

# Initialize 3D viewer
view = py3Dmol.view(width=600, height=400)
view.addModel(structure_data, 'pdbqt')  # or 'pdb' if file is .pdb
view.setStyle({'cartoon': {'color': 'spectrum'}})
view.setStyle({'model': -1}, {'stick': {}})
view.zoomTo()
view.show()

# Load and display both receptor and ligand
receptor_file = "/content/5vt2.pdbqt"
ligand_file = "/content/optimized_docking_results/ligand_0.pdbqt_docked.pdbqt"

with open(receptor_file, 'r') as f:
    receptor = f.read()

with open(ligand_file, 'r') as f:
    ligand = f.read()

view = py3Dmol.view(width=700, height=500)
view.addModel(receptor, 'pdbqt')
view.setStyle({'model': 0}, {'cartoon': {'color': 'grey'}})

view.addModel(ligand, 'pdbqt')
view.setStyle({'model': 1}, {'stick': {'colorscheme': 'greenCarbon'}})

view.zoomTo()
view.show()

!obabel /content/optimized_docking_results/ligand_0.pdbqt_docked.pdbqt -O ligand_0_docked.pdb

# Load and display both receptor and ligand
receptor_file = "/content/5vt2.pdbqt"
ligand_file = "/content/ligand_0_docked.pdb"

with open(receptor_file, 'r') as f:
    receptor = f.read()

with open(ligand_file, 'r') as f:
    ligand = f.read()

view = py3Dmol.view(width=700, height=500)
view.addModel(receptor, 'pdbqt')
view.setStyle({'model': 0}, {'cartoon': {'color': 'grey'}})

view.addModel(ligand, 'pdbqt')
view.setStyle({'model': 1}, {'stick': {'colorscheme': 'greenCarbon'}})

view.zoomTo()
view.show()

import py3Dmol

# Load your files (PDB format after conversion)
receptor_file = "/content/5vt2.pdb"
ligand_file = "/content/ligand_0_docked.pdb"

# Read the contents
with open(receptor_file, 'r') as f:
    receptor = f.read()
with open(ligand_file, 'r') as f:
    ligand = f.read()

# Initialize viewer
view = py3Dmol.view(width=900, height=650)

# Add receptor (ribbon style with semi-transparency)
view.addModel(receptor, 'pdb')
view.setStyle({'model': 0}, {
    'cartoon': {
        'color': 'white',
        'opacity': 0.9
    }
})

# Add ligand with vibrant color and enhanced style
view.addModel(ligand, 'pdb')
view.setStyle({'model': 1}, {
    'stick': {
        'radius': 0.25,
        'colorscheme': 'cyanCarbon'
    },
    'sphere': {
        'scale': 0.3,
        'colorscheme': 'cyanCarbon'
    }
})
view.addStyle({'resi': ['123', '127']}, {'stick': {'color': 'red'}})

# Background and final touches
view.setBackgroundColor('white')  # Or 'black' for dramatic look
view.zoomTo()
view.show()

import py3Dmol

receptor_file = "/content/5vt2.pdb"
ligand_file = "/content/ligand_0_docked.pdb"

with open(receptor_file, 'r') as f:
    receptor = f.read()
with open(ligand_file, 'r') as f:
    ligand = f.read()

view = py3Dmol.view(width=900, height=650)

# Add receptor with colored cartoon by chain (or use 'spectrum' for rainbow)
view.addModel(receptor, 'pdb')
view.setStyle({'model': 0}, {
    'cartoon': {
        'color': 'spectrum',  # Try 'chain' or 'spectrum'
        'opacity': 0.9
    }
})

# Add ligand with hybrid styles
view.addModel(ligand, 'pdb')
view.setStyle({'model': 1}, {
    'stick': {'radius': 0.25, 'colorscheme': 'cyanCarbon'},
    'sphere': {'scale': 0.3, 'colorscheme': 'cyanCarbon'}
})

# Optional: highlight residues (if applicable)
# view.addStyle({'resi': ['123', '127']}, {'stick': {'color': 'red'}})

view.setBackgroundColor('white')
view.zoomTo()
view.show()

import seaborn as sns
import pandas as pd

# Simulated example: 3 ligands, 5 poses each
affinities = {
    "Ligand_1": [-7.1, -6.9, -6.8, -6.5, -6.0],
    "Ligand_2": [-8.3, -8.1, -7.9, -7.4, -6.9],
    "Ligand_3": [-7.0, -7.2, -6.7, -6.3, -5.8]
}

df = pd.DataFrame(affinities, index=[f"Pose {i+1}" for i in range(5)])

plt.figure(figsize=(8, 6))
sns.heatmap(df, annot=True, cmap='coolwarm_r', linewidths=0.5)
plt.title("Docking Affinity Heatmap (kcal/mol)")
plt.ylabel("Docking Pose")
plt.tight_layout()
plt.show()

from rdkit import Chem
from rdkit.Chem import AllChem

mol = Chem.MolFromSmiles('CCO')  # Example: ethanol
mol = Chem.AddHs(mol)

# Embed 3D coordinates
AllChem.EmbedMolecule(mol, AllChem.ETKDG())

# Compute UFF energy before
energy_before = AllChem.UFFGetMoleculeForceField(mol).CalcEnergy()

# Optimize (minimize)
AllChem.UFFOptimizeMolecule(mol)

# Compute UFF energy after
energy_after = AllChem.UFFGetMoleculeForceField(mol).CalcEnergy()

print(f"Energy before: {energy_before:.2f} kcal/mol")
print(f"Energy after:  {energy_after:.2f} kcal/mol")

# ✅ Colab-ready Python Notebook
# Ligand Minimization with RDKit + Energy Plot + Vina Score Comparison

# Step 1: Install RDKit
!pip install rdkit-pypi -q

# Step 2: Import Libraries
from rdkit import Chem
from rdkit.Chem import AllChem
import matplotlib.pyplot as plt
import numpy as np

# Step 3: Define SMILES ligand (use your real ligand here)
smiles = "CC1=CC=CC=C1"  # Example: toluene
mol = Chem.MolFromSmiles(smiles)
mol = Chem.AddHs(mol)

# Step 4: Embed 3D coordinates
AllChem.EmbedMolecule(mol, AllChem.ETKDG())

# Step 5: Create force field object
ff = AllChem.UFFGetMoleculeForceField(mol)

# Step 6: Record energy before minimization
energies = [ff.CalcEnergy()]
steps = [0]

# Step 7: Manual minimization to get per-step energies
n_steps = 50
for step in range(1, n_steps + 1):
    ff.Minimize(energyTol=1e-4, maxIts=1)
    energy = ff.CalcEnergy()
    energies.append(energy)
    steps.append(step)

# Step 8: Plot Energy Minimization Curve
plt.figure(figsize=(10, 6))
plt.plot(steps, energies, marker='o', color='crimson', label='RDKit UFF energy')
plt.xlabel("Minimization Step")
plt.ylabel("Energy (kcal/mol)")
plt.title("Ligand Energy Minimization Curve (UFF) via RDKit")
plt.grid(alpha=0.3)
plt.legend()
plt.tight_layout()
plt.show()

# Step 9: Optionally compare with Vina affinity
vina_score = -6.5  # Replace with real score from your docking
print(f"\nFinal UFF Energy after minimization: {energies[-1]:.4f} kcal/mol")
print(f"AutoDock Vina Score (affinity): {vina_score:.2f} kcal/mol")

"""Minimize ligand using RDKit"""

from rdkit import Chem
from rdkit.Chem import AllChem

# Example SMILES
smiles = "CC1=CC=CC=C1"  # Toluene

# Step 1: Create and minimize
mol = Chem.MolFromSmiles(smiles)
mol = Chem.AddHs(mol)
AllChem.EmbedMolecule(mol, AllChem.ETKDG())
AllChem.UFFOptimizeMolecule(mol)

# Step 2: Save as PDB
Chem.MolToPDBFile(mol, "ligand_minimized.pdb")

"""Convert PDB to PDBQT using Open Babel"""

# Setup Open Babel (auto-installs in Colab)
!apt-get install -y openbabel
from google.colab import files
uploaded = files.upload()

import os

pdb_file = list(uploaded.keys())[0]
temp_pdbqt = pdb_file.replace('.pdb', '_temp.pdbqt')
final_pdbqt = pdb_file.replace('.pdb', '_receptor.pdbqt')

# Convert to PDBQT
!obabel "{pdb_file}" -O "{temp_pdbqt}"

# Remove invalid tags like ROOT, BRANCH, TORSDOF
bad_tags = {"ROOT", "ENDROOT", "BRANCH", "ENDBRANCH", "TORSDOF"}

with open(temp_pdbqt) as f_in, open(final_pdbqt, "w") as f_out:
    for line in f_in:
        if not any(tag in line for tag in bad_tags):
            f_out.write(line)

print(f"✅ Cleaned receptor saved as: {final_pdbqt}")

!apt-get install -y openbabel
!obabel ligand_minimized.pdb -O ligand_minimized.pdbqt --gen3d

!vina --receptor /content/5vt2_receptor.pdbqt \
      --ligand ligand_minimized.pdbqt \
      --center_x 32 --center_y -8 --center_z -11 \
      --size_x 24 --size_y 24 --size_z 24 \
      --out ligand_docked.pdbqt \
      --exhaustiveness 8 \
      --cpu 2 \
      --num_modes 9 > vina_log.txt

!vina --receptor /content/5vt2_receptor.pdbqt \
      --ligand ligand_minimized.pdbqt \
      --center_x 32 --center_y -8 --center_z -11 \
      --size_x 24 --size_y 24 --size_z 24 \
      --out ligand_docked.pdbqt \
      --exhaustiveness 8 \
      --cpu 2 \
      --num_modes 9

"""fpocket (accurate cavity detection via surface analysis)"""

!apt-get update -qq
!apt-get install -y build-essential git unzip

!git clone https://github.com/Discngine/fpocket.git
!cd fpocket && make

import os
os.environ['PATH'] += ":/content/fpocket/bin"

!/content/fpocket/bin/fpocket -f 5vt2.pdb

import numpy as np

def get_center_from_pdb(pocket_file):
    coords = []
    with open(pocket_file) as f:
        for line in f:
            if line.startswith("ATOM"):
                x = float(line[30:38])
                y = float(line[38:46])
                z = float(line[46:54])
                coords.append([x, y, z])
    coords = np.array(coords)
    return coords.mean(axis=0)

center = get_center_from_pdb("/content/5vt2_out/pockets/pocket9_atm.pdb")
print(f"Suggested Vina Box Center:\n  --center_x {center[0]:.2f} --center_y {center[1]:.2f} --center_z {center[2]:.2f}")